# Generated by Django 5.1.1 on 2024-09-11 06:36

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fio', models.CharField(max_length=200, verbose_name='Ф.И.О Автора')),
            ],
        ),
        migrations.CreateModel(
            name='BookHall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Имя зала')),
            ],
            options={
                'verbose_name': 'Книжный зал',
            },
        ),
        migrations.CreateModel(
            name='Librarian',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fio', models.CharField(max_length=200, verbose_name='Ф.И.О.')),
            ],
            options={
                'verbose_name': 'Библиотекарь',
            },
        ),
        migrations.CreateModel(
            name='PublicationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название типа публикации')),
            ],
        ),
        migrations.CreateModel(
            name='Reader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fio', models.CharField(max_length=200, verbose_name='Ф.И.О.')),
            ],
            options={
                'verbose_name': 'Читатель',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Наименование книги')),
                ('pub_date', models.DateField(verbose_name='Дата издания')),
                ('number', models.PositiveIntegerField(verbose_name='Номер')),
                ('page_count', models.PositiveSmallIntegerField(verbose_name='Количество страниц')),
                ('description', models.TextField(verbose_name='Описание')),
                ('author', models.ManyToManyField(to='bookHouse.author')),
                ('publication_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='bookHouse.publicationtype')),
            ],
            options={
                'verbose_name': 'Книга',
            },
        ),
        migrations.CreateModel(
            name='BookCase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(verbose_name='Номер стеллажа')),
                ('book_hall', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bookHouse.bookhall')),
            ],
            options={
                'verbose_name': 'Стеллаж',
            },
        ),
        migrations.CreateModel(
            name='BookShelf',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(verbose_name='Номер полки')),
                ('book_case', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bookHouse.bookcase')),
            ],
            options={
                'verbose_name': 'Полка',
            },
        ),
        migrations.AddField(
            model_name='bookhall',
            name='librarian',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bookHouse.librarian'),
        ),
        migrations.CreateModel(
            name='MoveBookJournal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time_move', models.DateTimeField(verbose_name='Дата перемещения/выдачи/сдачи')),
                ('outside_the_library', models.BooleanField(default=False, verbose_name='Выдача на дом')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bookHouse.book')),
                ('from_book_shelf', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='from_book_shelf', to='bookHouse.bookshelf', verbose_name='Откуда переместили')),
                ('librarian', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='bookHouse.librarian', verbose_name='Библиотекарь внесший перемещение/выдачу/прием книги')),
                ('to_book_shelf', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='to_book_shelf', to='bookHouse.bookshelf', verbose_name='Куда переместили')),
                ('reader', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='bookHouse.reader')),
            ],
            options={
                'verbose_name': 'Журнал перемещения/выдачи/приема',
            },
        ),
        migrations.AddConstraint(
            model_name='bookcase',
            constraint=models.UniqueConstraint(fields=('number', 'book_hall'), name='Номер стеллажа должен быть уникален в рамках зала'),
        ),
        migrations.AddConstraint(
            model_name='bookshelf',
            constraint=models.UniqueConstraint(fields=('number', 'book_case'), name='Номер полки должен быть уникален в рамках стеллажа'),
        ),
        migrations.AddConstraint(
            model_name='book',
            constraint=models.UniqueConstraint(fields=('number',), name='Номер книги должен быть уникальным'),
        ),
    ]
